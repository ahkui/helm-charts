{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "Common Values",
    "description": "The default scheme for the chart values.",
    "type": "object",
    "required": [
        "replicaCount",
        "image",
        "serviceAccount",
        "service"
    ],
    "properties": {
        "replicaCount": {
            "description": "Number of desired pods.",
            "type": "integer",
            "default": 1,
            "minimum": 0
        },
        "image": {
            "description": "Container image parameters.",
            "type": "object",
            "required": [
                "repository"
            ],
            "additionalProperties": false,
            "properties": {
                "repository": {
                    "description": "Image repository. Path to the image with registry(quay.io) or without(nginx) for docker.io.",
                    "type": "string"
                },
                "pullPolicy": {
                    "description": "Image pull policy. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated.",
                    "type": "string",
                    "enum": [
                        "Never",
                        "IfNotPresent",
                        "Always"
                    ],
                    "default": "IfNotPresent"
                },
                "tag": {
                    "description": "Use chart appVersion by default.",
                    "type": "string",
                    "default": ""
                }
            }
        },
        "imagePullSecrets": {
            "description": "The property allows you to configure multiple image pull secrets.",
            "type": "array",
            "default": [],
            "items": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Specifies the Secret name of the image pull secret.",
                        "type": "string"
                    }
                }
            }
        },
        "nameOverride": {
            "description": "Override value for the name of the Helm chart.",
            "type": "string",
            "default": ""
        },
        "fullnameOverride": {
            "description": "Override value for the fully qualified app name.",
            "type": "string",
            "default": ""
        },
        "serviceAccount": {
            "description": "Contains properties related to the service account configuration.",
            "type": "object",
            "required": [
                "create"
            ],
            "properties": {
                "create": {
                    "description": "Specifies whether a service account should be created.",
                    "type": "boolean",
                    "default": true
                },
                "annotations": {
                    "description": "Annotations to add to the service account.",
                    "type": "object",
                    "default": {}
                },
                "name": {
                    "description": "The name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "type": "string",
                    "default": ""
                }
            }
        },
        "annotations": {
            "description": "Annotations to add to the Deployment/DaemonSet/StatefulSets.",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "labels": {
            "description": "Labels to add to the Deployment/DaemonSet/StatefulSets.",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "podAnnotations": {
            "description": "Annotations to add to the pods.",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "podLabels": {
            "description": "Labels to add to the pods.",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "priorityClassName": {
            "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority.",
            "type": "string"
        },
        "podSecurityContext": {
            "description": "Pod security context configuration.",
            "type": "object",
            "properties": {
                "fsGroup": {
                    "description": "The fsGroup value for the pod's security context.",
                    "type": "integer",
                    "default": 65534
                },
                "runAsUser": {
                    "description": "The UID to run the pod's containers as.",
                    "type": "integer"
                },
                "runAsGroup": {
                    "description": "The GID to run the pod's containers as.",
                    "type": "integer"
                }
            }
        },
        "securityContext": {
            "description": "Security context for the container.",
            "type": "object",
            "properties": {
                "capabilities": {
                    "description": "Specifies the capabilities to be dropped by the container.",
                    "type": "object",
                    "properties": {
                        "drop": {
                            "description": "List of capabilities to be dropped.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "readOnlyRootFilesystem": {
                    "description": "Specifies whether the root file system should be mounted as read-only.",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "Specifies the UID (User ID) to run the container as.",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Specifies whether to run the container as a non-root user.",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "Specifies the GID (Group ID) to run the container as.",
                    "type": "integer"
                }
            }
        },
        "service": {
            "description": "Service configuration.",
            "type": "object",
            "required": [
                "enabled",
                "type",
                "ports"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "annotations": {
                    "description": "Annotations to add to the service.",
                    "type": "object"
                },
                "type": {
                    "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
                    "type": "string",
                    "enum": [
                        "ClusterIP",
                        "NodePort",
                        "LoadBalancer",
                        "None"
                    ]
                },
                "clusterIP": {
                    "description": "clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
                    "type": "string"
                },
                "ports": {
                    "description": "Port list for the service.",
                    "type": "object",
                    "additionalProperties": {
                        "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                            "enabled",
                            "protocol",
                            "servicePort",
                            "containerPort"
                        ],
                        "properties": {
                            "enabled": {
                                "type": "boolean"
                            },
                            "appProtocol": {
                                "description": "The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand. This field follows standard Kubernetes label syntax. Valid values are either: \n * Un-prefixed protocol names - reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c' - HTTP/2 over cleartext as described in https://www.rfc-editor.org/rfc/rfc7540 * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455 * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455 \n * Other protocols should use implementation-defined prefixed names such as mycompany.com/my-custom-protocol.",
                                "type": "string"
                            },
                            "protocol": {
                                "default": "TCP",
                                "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
                                "type": "string"
                            },
                            "servicePort": {
                                "description": "The port that will be exposed by this service.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "containerPort": {
                                "anyOf": [
                                    {
                                        "type": "integer"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ],
                                "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service"
                            },
                            "nodePort": {
                                "description": "The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
                                "format": "int32",
                                "type": "integer"
                            },
                            "hostPort": {
                                "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                },
                "loadBalancerIP": {
                    "description": "External IP to assign when the service type is LoadBalancer.",
                    "type": "string"
                },
                "loadBalancerSourceRanges": {
                    "description": "IP ranges to allow access to the loadBalancerIP.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ingress": {
            "description": "Ingress configuration.",
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Indicates if Ingress is enabled.",
                    "type": "boolean"
                },
                "className": {
                    "description": "Ingress class name.",
                    "type": "string"
                },
                "annotations": {
                    "description": "Annotations to add to the Ingress.",
                    "type": "object"
                },
                "hosts": {
                    "description": "Host and path configuration for the Ingress.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "host": {
                                "description": "Host name for the Ingress.",
                                "type": "string"
                            },
                            "paths": {
                                "description": "Path configuration for the Ingress.",
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "path": {
                                            "description": "Path for the Ingress.",
                                            "type": "string"
                                        },
                                        "pathType": {
                                            "description": "Path type for the Ingress.",
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tls": {
                    "description": "TLS configuration for the Ingress.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "secretName": {
                                "description": "Name of the secret for TLS.",
                                "type": "string"
                            },
                            "hosts": {
                                "description": "Host names for the TLS configuration.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "podDisruptionBudget": {
            "description": "Settings to limit the disruption when pods need to be rescheduled for some reason such as upgrades or routine maintenance.",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "minAvailable": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\"."
                },
                "maxUnavailable": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\"."
                }
            }
        },
        "resources": {
            "description": "Resource limits and requests for the Container.",
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Resource limits for the Container.",
                    "type": "object",
                    "properties": {
                        "cpu": {
                            "description": "CPU request for the Container.",
                            "type": "string"
                        },
                        "memory": {
                            "description": "Memory request for the Container.",
                            "type": "string"
                        }
                    }
                },
                "requests": {
                    "description": "Resource requests for the Container.",
                    "type": "object",
                    "properties": {
                        "cpu": {
                            "description": "CPU request for the Container.",
                            "type": "string"
                        },
                        "memory": {
                            "description": "Memory request for the Container.",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "autoscaling": {
            "description": "Configuration for autoscaling the resource based on resource utilization.",
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Specifies whether autoscaling is enabled.",
                    "type": "boolean"
                },
                "minReplicas": {
                    "description": "Minimum number of replicas for the resource.",
                    "type": "integer"
                },
                "maxReplicas": {
                    "description": "Maximum number of replicas for the resource.",
                    "type": "integer"
                },
                "targetCPUUtilizationPercentage": {
                    "description": "Target CPU utilization percentage for autoscaling.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100
                },
                "targetMemoryUtilizationPercentage": {
                    "description": "Target memory utilization percentage for autoscaling.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100
                }
            }
        },
        "nodeSelector": {
            "additionalProperties": {
                "type": "string"
            },
            "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
            "type": "object"
        },
        "tolerations": {
            "description": "If specified, the pod's tolerations.",
            "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                "properties": {
                    "effect": {
                        "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                        "type": "string"
                    },
                    "key": {
                        "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                        "type": "string"
                    },
                    "operator": {
                        "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                        "type": "string"
                    },
                    "tolerationSeconds": {
                        "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "value": {
                        "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "affinity": {
            "description": "Affinity rules for pod assignment.",
            "type": "object"
        },
        "hostAliases": {
            "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
            "items": {
                "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
                "properties": {
                    "hostnames": {
                        "description": "Hostnames for the above IP address.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ip": {
                        "description": "IP address of the host file entry.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "topologySpreadConstraints": {
            "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
            "items": {
                "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                "properties": {
                    "labelSelector": {
                        "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                        "properties": {
                            "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                    "properties": {
                                        "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                        },
                                        "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                        },
                                        "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "operator"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "matchLabels": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "matchLabelKeys": {
                        "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector. \n This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "maxSkew": {
                        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "minDomains": {
                        "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. \n For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. \n This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                        "format": "int32",
                        "type": "integer"
                    },
                    "nodeAffinityPolicy": {
                        "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. \n If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                        "type": "string"
                    },
                    "nodeTaintsPolicy": {
                        "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. \n If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                        "type": "string"
                    },
                    "topologyKey": {
                        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                        "type": "string"
                    },
                    "whenUnsatisfiable": {
                        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                        "type": "string"
                    }
                },
                "required": [
                    "maxSkew",
                    "topologyKey",
                    "whenUnsatisfiable"
                ],
                "type": "object"
            },
            "type": "array"
        },
        "terminationGracePeriodSeconds": {
            "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
            "format": "int64",
            "type": "integer"
        },
        "readinessProbe": {
            "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "properties": {
                        "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "properties": {
                        "port": {
                            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "service": {
                            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "properties": {
                        "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                        },
                        "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "items": {
                                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                "properties": {
                                    "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        },
                        "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "properties": {
                        "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "format": "int64",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "livenessProbe": {
            "description": "Probes are not allowed for ephemeral containers.",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "properties": {
                        "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "properties": {
                        "port": {
                            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "service": {
                            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "properties": {
                        "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                        },
                        "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "items": {
                                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                "properties": {
                                    "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        },
                        "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "properties": {
                        "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "format": "int64",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "startupProbe": {
            "description": "Probes are not allowed for ephemeral containers.",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.",
                    "properties": {
                        "command": {
                            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "type": "object"
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.",
                    "properties": {
                        "port": {
                            "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                            "format": "int32",
                            "type": "integer"
                        },
                        "service": {
                            "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.",
                    "properties": {
                        "host": {
                            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                            "type": "string"
                        },
                        "httpHeaders": {
                            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                            "items": {
                                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                "properties": {
                                    "name": {
                                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                        "type": "string"
                                    },
                                    "value": {
                                        "description": "The header field value",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "path": {
                            "description": "Path to access on the HTTP server.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        },
                        "scheme": {
                            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.",
                    "properties": {
                        "host": {
                            "description": "Optional: Host name to connect to, defaults to the pod IP.",
                            "type": "string"
                        },
                        "port": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                        }
                    },
                    "required": [
                        "port"
                    ],
                    "type": "object"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "format": "int64",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "lifecycle": {
            "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                    "properties": {
                        "exec": {
                            "description": "Exec specifies the action to take.",
                            "properties": {
                                "command": {
                                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "properties": {
                                "host": {
                                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                    "type": "string"
                                },
                                "httpHeaders": {
                                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                    "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                            "name": {
                                                "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "The header field value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "value"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "path": {
                                    "description": "Path to access on the HTTP server.",
                                    "type": "string"
                                },
                                "port": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "port"
                            ],
                            "type": "object"
                        },
                        "tcpSocket": {
                            "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                            "properties": {
                                "host": {
                                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                    "type": "string"
                                },
                                "port": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                            },
                            "required": [
                                "port"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                    "properties": {
                        "exec": {
                            "description": "Exec specifies the action to take.",
                            "properties": {
                                "command": {
                                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        },
                        "httpGet": {
                            "description": "HTTPGet specifies the http request to perform.",
                            "properties": {
                                "host": {
                                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                    "type": "string"
                                },
                                "httpHeaders": {
                                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                    "items": {
                                        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                        "properties": {
                                            "name": {
                                                "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                "type": "string"
                                            },
                                            "value": {
                                                "description": "The header field value",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "value"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                },
                                "path": {
                                    "description": "Path to access on the HTTP server.",
                                    "type": "string"
                                },
                                "port": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                },
                                "scheme": {
                                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "port"
                            ],
                            "type": "object"
                        },
                        "tcpSocket": {
                            "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                            "properties": {
                                "host": {
                                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                    "type": "string"
                                },
                                "port": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                }
                            },
                            "required": [
                                "port"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "initContainers": {
            "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
            "items": {
                "description": "A single application container that you want to run within a pod.",
                "properties": {
                    "args": {
                        "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "command": {
                        "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "env": {
                        "description": "List of environment variables to set in the container. Cannot be updated.",
                        "items": {
                            "description": "EnvVar represents an environment variable present in a Container.",
                            "properties": {
                                "name": {
                                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                    "type": "string"
                                },
                                "valueFrom": {
                                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                    "properties": {
                                        "configMapKeyRef": {
                                            "description": "Selects a key of a ConfigMap.",
                                            "properties": {
                                                "key": {
                                                    "description": "The key to select.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                    "type": "string"
                                                },
                                                "optional": {
                                                    "description": "Specify whether the ConfigMap or its key must be defined",
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "type": "object"
                                        },
                                        "fieldRef": {
                                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                                    "type": "string"
                                                },
                                                "fieldPath": {
                                                    "description": "Path of the field to select in the specified API version.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "fieldPath"
                                            ],
                                            "type": "object"
                                        },
                                        "resourceFieldRef": {
                                            "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                            "properties": {
                                                "containerName": {
                                                    "description": "Container name: required for volumes, optional for env vars",
                                                    "type": "string"
                                                },
                                                "divisor": {
                                                    "anyOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "string"
                                                        }
                                                    ],
                                                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                                },
                                                "resource": {
                                                    "description": "Required: resource to select",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "resource"
                                            ],
                                            "type": "object"
                                        },
                                        "secretKeyRef": {
                                            "description": "Selects a key of a secret in the pod's namespace",
                                            "properties": {
                                                "key": {
                                                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                                    "type": "string"
                                                },
                                                "optional": {
                                                    "description": "Specify whether the Secret or its key must be defined",
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "key"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "envFrom": {
                        "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                        "items": {
                            "description": "EnvFromSource represents the source of a set of ConfigMaps",
                            "properties": {
                                "configMapRef": {
                                    "description": "The ConfigMap to select from",
                                    "properties": {
                                        "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                        },
                                        "optional": {
                                            "description": "Specify whether the ConfigMap must be defined",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                },
                                "prefix": {
                                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                                    "type": "string"
                                },
                                "secretRef": {
                                    "description": "The Secret to select from",
                                    "properties": {
                                        "name": {
                                            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                            "type": "string"
                                        },
                                        "optional": {
                                            "description": "Specify whether the Secret must be defined",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "image": {
                        "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                        "type": "string"
                    },
                    "imagePullPolicy": {
                        "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                        "type": "string"
                    },
                    "lifecycle": {
                        "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
                        "properties": {
                            "postStart": {
                                "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                "properties": {
                                    "exec": {
                                        "description": "Exec specifies the action to take.",
                                        "properties": {
                                            "command": {
                                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "httpGet": {
                                        "description": "HTTPGet specifies the http request to perform.",
                                        "properties": {
                                            "host": {
                                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                "type": "string"
                                            },
                                            "httpHeaders": {
                                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                "items": {
                                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                    "properties": {
                                                        "name": {
                                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name",
                                                        "value"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "path": {
                                                "description": "Path to access on the HTTP server.",
                                                "type": "string"
                                            },
                                            "port": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                            },
                                            "scheme": {
                                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "port"
                                        ],
                                        "type": "object"
                                    },
                                    "tcpSocket": {
                                        "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                        "properties": {
                                            "host": {
                                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                "type": "string"
                                            },
                                            "port": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                            }
                                        },
                                        "required": [
                                            "port"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "preStop": {
                                "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
                                "properties": {
                                    "exec": {
                                        "description": "Exec specifies the action to take.",
                                        "properties": {
                                            "command": {
                                                "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "httpGet": {
                                        "description": "HTTPGet specifies the http request to perform.",
                                        "properties": {
                                            "host": {
                                                "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                                "type": "string"
                                            },
                                            "httpHeaders": {
                                                "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                                "items": {
                                                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                                    "properties": {
                                                        "name": {
                                                            "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "description": "The header field value",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name",
                                                        "value"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "path": {
                                                "description": "Path to access on the HTTP server.",
                                                "type": "string"
                                            },
                                            "port": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                            },
                                            "scheme": {
                                                "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "port"
                                        ],
                                        "type": "object"
                                    },
                                    "tcpSocket": {
                                        "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.",
                                        "properties": {
                                            "host": {
                                                "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                                "type": "string"
                                            },
                                            "port": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ],
                                                "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                            }
                                        },
                                        "required": [
                                            "port"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "livenessProbe": {
                        "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "properties": {
                            "exec": {
                                "description": "Exec specifies the action to take.",
                                "properties": {
                                    "command": {
                                        "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "failureThreshold": {
                                "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "grpc": {
                                "description": "GRPC specifies an action involving a GRPC port.",
                                "properties": {
                                    "port": {
                                        "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "service": {
                                        "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "httpGet": {
                                "description": "HTTPGet specifies the http request to perform.",
                                "properties": {
                                    "host": {
                                        "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                        "type": "string"
                                    },
                                    "httpHeaders": {
                                        "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                        "items": {
                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                            "properties": {
                                                "name": {
                                                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The header field value",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name",
                                                "value"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "path": {
                                        "description": "Path to access on the HTTP server.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                        "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "initialDelaySeconds": {
                                "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            },
                            "periodSeconds": {
                                "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "successThreshold": {
                                "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "tcpSocket": {
                                "description": "TCPSocket specifies an action involving a TCP port.",
                                "properties": {
                                    "host": {
                                        "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "terminationGracePeriodSeconds": {
                                "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "timeoutSeconds": {
                                "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                        "type": "string"
                    },
                    "ports": {
                        "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
                        "items": {
                            "description": "ContainerPort represents a network port in a single container.",
                            "properties": {
                                "containerPort": {
                                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "hostIP": {
                                    "description": "What host IP to bind the external port to.",
                                    "type": "string"
                                },
                                "hostPort": {
                                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                                    "format": "int32",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                                    "type": "string"
                                },
                                "protocol": {
                                    "default": "TCP",
                                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "containerPort"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "readinessProbe": {
                        "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "properties": {
                            "exec": {
                                "description": "Exec specifies the action to take.",
                                "properties": {
                                    "command": {
                                        "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "failureThreshold": {
                                "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "grpc": {
                                "description": "GRPC specifies an action involving a GRPC port.",
                                "properties": {
                                    "port": {
                                        "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "service": {
                                        "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "httpGet": {
                                "description": "HTTPGet specifies the http request to perform.",
                                "properties": {
                                    "host": {
                                        "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                        "type": "string"
                                    },
                                    "httpHeaders": {
                                        "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                        "items": {
                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                            "properties": {
                                                "name": {
                                                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The header field value",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name",
                                                "value"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "path": {
                                        "description": "Path to access on the HTTP server.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                        "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "initialDelaySeconds": {
                                "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            },
                            "periodSeconds": {
                                "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "successThreshold": {
                                "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "tcpSocket": {
                                "description": "TCPSocket specifies an action involving a TCP port.",
                                "properties": {
                                    "host": {
                                        "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "terminationGracePeriodSeconds": {
                                "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "timeoutSeconds": {
                                "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "resizePolicy": {
                        "description": "Resources resize policy for the container.",
                        "items": {
                            "description": "ContainerResizePolicy represents resource resize policy for the container.",
                            "properties": {
                                "resourceName": {
                                    "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
                                    "type": "string"
                                },
                                "restartPolicy": {
                                    "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "resourceName",
                                "restartPolicy"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "resources": {
                        "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "properties": {
                            "claims": {
                                "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                                "items": {
                                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                    "properties": {
                                        "name": {
                                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "name"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "limits": {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                },
                                "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "type": "object"
                            },
                            "requests": {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                },
                                "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "restartPolicy": {
                        "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
                        "type": "string"
                    },
                    "securityContext": {
                        "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
                        "properties": {
                            "allowPrivilegeEscalation": {
                                "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
                                "type": "boolean"
                            },
                            "capabilities": {
                                "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.",
                                "properties": {
                                    "add": {
                                        "description": "Added capabilities",
                                        "items": {
                                            "description": "Capability represent POSIX capabilities type",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "drop": {
                                        "description": "Removed capabilities",
                                        "items": {
                                            "description": "Capability represent POSIX capabilities type",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "privileged": {
                                "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
                                "type": "boolean"
                            },
                            "procMount": {
                                "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
                                "type": "string"
                            },
                            "readOnlyRootFilesystem": {
                                "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
                                "type": "boolean"
                            },
                            "runAsGroup": {
                                "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "runAsNonRoot": {
                                "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                "type": "boolean"
                            },
                            "runAsUser": {
                                "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "seLinuxOptions": {
                                "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
                                "properties": {
                                    "level": {
                                        "description": "Level is SELinux level label that applies to the container.",
                                        "type": "string"
                                    },
                                    "role": {
                                        "description": "Role is a SELinux role label that applies to the container.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Type is a SELinux type label that applies to the container.",
                                        "type": "string"
                                    },
                                    "user": {
                                        "description": "User is a SELinux user label that applies to the container.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "seccompProfile": {
                                "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.",
                                "properties": {
                                    "localhostProfile": {
                                        "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type"
                                ],
                                "type": "object"
                            },
                            "windowsOptions": {
                                "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.",
                                "properties": {
                                    "gmsaCredentialSpec": {
                                        "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                                        "type": "string"
                                    },
                                    "gmsaCredentialSpecName": {
                                        "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                                        "type": "string"
                                    },
                                    "hostProcess": {
                                        "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
                                        "type": "boolean"
                                    },
                                    "runAsUserName": {
                                        "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "startupProbe": {
                        "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                        "properties": {
                            "exec": {
                                "description": "Exec specifies the action to take.",
                                "properties": {
                                    "command": {
                                        "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            },
                            "failureThreshold": {
                                "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "grpc": {
                                "description": "GRPC specifies an action involving a GRPC port.",
                                "properties": {
                                    "port": {
                                        "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                                        "format": "int32",
                                        "type": "integer"
                                    },
                                    "service": {
                                        "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). \n If this is not specified, the default behavior is defined by gRPC.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "httpGet": {
                                "description": "HTTPGet specifies the http request to perform.",
                                "properties": {
                                    "host": {
                                        "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                                        "type": "string"
                                    },
                                    "httpHeaders": {
                                        "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                                        "items": {
                                            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                                            "properties": {
                                                "name": {
                                                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "description": "The header field value",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name",
                                                "value"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "path": {
                                        "description": "Path to access on the HTTP server.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    },
                                    "scheme": {
                                        "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "initialDelaySeconds": {
                                "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            },
                            "periodSeconds": {
                                "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "successThreshold": {
                                "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                                "format": "int32",
                                "type": "integer"
                            },
                            "tcpSocket": {
                                "description": "TCPSocket specifies an action involving a TCP port.",
                                "properties": {
                                    "host": {
                                        "description": "Optional: Host name to connect to, defaults to the pod IP.",
                                        "type": "string"
                                    },
                                    "port": {
                                        "anyOf": [
                                            {
                                                "type": "integer"
                                            },
                                            {
                                                "type": "string"
                                            }
                                        ],
                                        "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                                    }
                                },
                                "required": [
                                    "port"
                                ],
                                "type": "object"
                            },
                            "terminationGracePeriodSeconds": {
                                "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                                "format": "int64",
                                "type": "integer"
                            },
                            "timeoutSeconds": {
                                "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                                "format": "int32",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "stdin": {
                        "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                        "type": "boolean"
                    },
                    "stdinOnce": {
                        "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                        "type": "boolean"
                    },
                    "terminationMessagePath": {
                        "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                        "type": "string"
                    },
                    "terminationMessagePolicy": {
                        "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                        "type": "string"
                    },
                    "tty": {
                        "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                        "type": "boolean"
                    },
                    "volumeDevices": {
                        "description": "volumeDevices is the list of block devices to be used by the container.",
                        "items": {
                            "description": "volumeDevice describes a mapping of a raw block device within a container.",
                            "properties": {
                                "devicePath": {
                                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "devicePath",
                                "name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "volumeMounts": {
                        "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                        "items": {
                            "description": "VolumeMount describes a mounting of a Volume within a container.",
                            "properties": {
                                "mountPath": {
                                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                    "type": "string"
                                },
                                "mountPropagation": {
                                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "This must match the Name of a Volume.",
                                    "type": "string"
                                },
                                "readOnly": {
                                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                    "type": "boolean"
                                },
                                "subPath": {
                                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                    "type": "string"
                                },
                                "subPathExpr": {
                                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "mountPath",
                                "name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "workingDir": {
                        "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object"
            },
            "type": "array"
        },
        "extraContainers": {
            "$ref": "#/properties/initContainers"
        },
        "volumeMounts": {
            "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
            "items": {
                "description": "VolumeMount describes a mounting of a Volume within a container.",
                "type": "object",
                "oneOf": [
                    {
                        "required": [
                            "configMapRef"
                        ],
                        "properties": {
                            "configMapRef": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "required": [
                            "secretRef"
                        ],
                        "properties": {
                            "secretRef": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "allOf": [
                    {
                        "required": [
                            "name"
                        ],
                        "properties": {
                            "mountPath": {
                                "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                                "type": "string"
                            },
                            "mountPropagation": {
                                "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                                "type": "string"
                            },
                            "name": {
                                "description": "This must match the Name of a Volume.",
                                "type": "string"
                            },
                            "readOnly": {
                                "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                                "type": "boolean"
                            },
                            "optional": {
                                "type": "boolean"
                            },
                            "subPath": {
                                "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                                "type": "string"
                            },
                            "subPathExpr": {
                                "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "type": "array"
        },
        "envFrom": {
            "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
            "items": {
                "description": "EnvFromSource represents the source of a set of ConfigMaps",
                "type": "object",
                "oneOf": [
                    {
                        "required": [
                            "configMapRef"
                        ],
                        "description": "The ConfigMap to select from",
                        "properties": {
                            "configMapRef": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                            },
                            "optional": {
                                "description": "Specify whether the ConfigMap must be defined",
                                "type": "boolean"
                            }
                        }
                    },
                    {
                        "required": [
                            "secretRef"
                        ],
                        "description": "The Secret to select from",
                        "properties": {
                            "secretRef": {
                                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                "type": "string"
                            },
                            "optional": {
                                "description": "Specify whether the Secret must be defined",
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "type": "array"
        },
        "env": {
            "description": "List of environment variables to set in the container. Cannot be updated.",
            "type": "object",
            "additionalProperties": {
                "description": "Name of the environment variable. Must be a C_IDENTIFIER.\nVariable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                "type": "string"
            }
        },
        "args": {
            "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "rollout": {
            "description": "Rollout specifies how updates to the cluster should be performed.",
            "properties": {
                "type": {
                    "description": "Type of update. Can be \"RollingUpdate\" or \"OnDelete\" or \"Recreate\". Default is RollingUpdate.",
                    "type": "string",
                    "enum": [
                        "Recreate",
                        "RollingUpdate",
                        "OnDelete"
                    ]
                },
                "rollingUpdate": {
                    "description": "Rolling update config params. Present only if type = \"RollingUpdate\".\nSpec to control the desired behavior of rolling update.",
                    "properties": {
                        "partition": {
                            "description": "If a partition is specified, all Pods with an ordinal that is greater than or equal to the partition will be updated when the StatefulSet's \".spec.template\" is updated.",
                            "format": "int32",
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "maxSurge": {
                            "description": "MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will disable the restriction. Defaults to unbounded if not specified.",
                            "format": "int32",
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "maxUnavailable": {
                            "description": "MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to circumstances under the control of the operator. Setting a negative value will disable this restriction. Defaults to 1 if not specified.",
                            "format": "int32",
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
            "type": "string",
            "enum": [
                "DaemonSet",
                "Deployment",
                "StatefulSet"
            ]
        },
        "volumeClaimTemplates": {
            "description": "VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet. Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate. Items defined here take precedence over any default claims added by the operator with the same name.",
            "items": {
                "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
                "properties": {
                    "apiVersion": {
                        "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                        "type": "string"
                    },
                    "kind": {
                        "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                        "type": "string"
                    },
                    "metadata": {
                        "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
                        "properties": {
                            "annotations": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            "finalizers": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "labels": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "type": "object"
                            },
                            "name": {
                                "type": "string"
                            },
                            "namespace": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "spec": {
                        "description": "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "properties": {
                            "accessModes": {
                                "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "dataSource": {
                                "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.",
                                "properties": {
                                    "apiGroup": {
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                        "type": "string"
                                    },
                                    "kind": {
                                        "description": "Kind is the type of resource being referenced",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Name is the name of resource being referenced",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "kind",
                                    "name"
                                ],
                                "type": "object"
                            },
                            "dataSourceRef": {
                                "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                "properties": {
                                    "apiGroup": {
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                                        "type": "string"
                                    },
                                    "kind": {
                                        "description": "Kind is the type of resource being referenced",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "Name is the name of resource being referenced",
                                        "type": "string"
                                    },
                                    "namespace": {
                                        "description": "Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "kind",
                                    "name"
                                ],
                                "type": "object"
                            },
                            "resources": {
                                "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                                "properties": {
                                    "claims": {
                                        "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers.",
                                        "items": {
                                            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                                            "properties": {
                                                "name": {
                                                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "limits": {
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                        },
                                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object"
                                    },
                                    "requests": {
                                        "additionalProperties": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ],
                                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                        },
                                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "selector": {
                                "description": "selector is a label query over volumes to consider for binding.",
                                "properties": {
                                    "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "items": {
                                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                            "properties": {
                                                "key": {
                                                    "description": "key is the label key that the selector applies to.",
                                                    "type": "string"
                                                },
                                                "operator": {
                                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                    "type": "string"
                                                },
                                                "values": {
                                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "required": [
                                                "key",
                                                "operator"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "matchLabels": {
                                        "additionalProperties": {
                                            "type": "string"
                                        },
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "storageClassName": {
                                "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                                "type": "string"
                            },
                            "volumeMode": {
                                "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                                "type": "string"
                            },
                            "volumeName": {
                                "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                        "properties": {
                            "accessModes": {
                                "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "allocatedResourceStatuses": {
                                "additionalProperties": {
                                    "description": "When a controller receives persistentvolume claim update with ClaimResourceStatus for a resource that it does not recognizes, then it should ignore that update and let other controllers handle it.",
                                    "type": "string"
                                },
                                "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either: * Un-prefixed keys: - storage - the capacity of the volume. * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used. \n ClaimResourceStatus can be in any of following states: - ControllerResizeInProgress: State set when resize controller starts resizing the volume in control-plane. - ControllerResizeFailed: State set when resize has failed in resize controller with a terminal error. - NodeResizePending: State set when resize controller has finished resizing the volume but further resizing of volume is needed on the node. - NodeResizeInProgress: State set when kubelet starts resizing the volume. - NodeResizeFailed: State set when resizing has failed in kubelet with a terminal error. Transient errors don't set NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states: - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\" - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\" - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\" - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\" - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\" When this field is not set, it means that no resize operation is in progress for the given PVC. \n A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC. \n This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
                                "type": "object"
                            },
                            "allocatedResources": {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                },
                                "description": "allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either: * Un-prefixed keys: - storage - the capacity of the volume. * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used. \n Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. \n A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC. \n This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
                                "type": "object"
                            },
                            "capacity": {
                                "additionalProperties": {
                                    "anyOf": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "string"
                                        }
                                    ],
                                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$"
                                },
                                "description": "capacity represents the actual resources of the underlying volume.",
                                "type": "object"
                            },
                            "conditions": {
                                "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
                                "items": {
                                    "description": "PersistentVolumeClaimCondition contains details about state of pvc",
                                    "properties": {
                                        "lastProbeTime": {
                                            "description": "lastProbeTime is the time we probed the condition.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "lastTransitionTime": {
                                            "description": "lastTransitionTime is the time the condition transitioned from one status to another.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "message": {
                                            "description": "message is the human-readable message indicating details about last transition.",
                                            "type": "string"
                                        },
                                        "reason": {
                                            "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "status",
                                        "type"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "phase": {
                                "description": "phase represents the current phase of PersistentVolumeClaim.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "type": "array"
        },
        "extraObjects": {
            "description": "Extra resource.",
            "type": "object",
            "additionalProperties": {
                "description": "Unique resource key.",
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "spec": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object"
                            }
                        ]
                    }
                }
            }
        }
    }
}
